def decode_mahindra_vin(vin):
    if len(vin) != 17:
        return {"error": "Invalid Mahindra VIN"}

    # Month codes
    month_codes = {
        "A": "January", "B": "February", "C": "March", "D": "April",
        "E": "May", "F": "June", "G": "July", "H": "August",
        "J": "September", "K": "October", "L": "November", "M": "December"
    }

    # Year codes
    year_codes = {chr(i): 2001 + (i - ord('2')) for i in range(ord('2'), ord('9') + 1)}
    year_codes.update({
        "A": 2010, "B": 2011, "C": 2012, "D": 2013, "E": 2014,
        "F": 2015, "G": 2016, "H": 2017, "J": 2018, "K": 2019,
        "L": 2020, "M": 2021, "N": 2022, "P": 2023, "R": 2024,
        "S": 2025, "T": 2026, "V": 2027, "W": 2028, "X": 2029, "Y": 2030
    })

    # Manufacturing plants
    plant_codes = {
        "1": "Kandivali, Mumbai - India",
        "2": "Nasik, Maharashtra - India",
        "3": "Zaheerabad, Telangana - India"
    }

    # Extract relevant characters
    model_code = vin[3:6]   # 4th to 6th position
    engine_code = vin[6:8]  # 7th to 8th position
    year_char = vin[9]      # 10th position
    plant_char = vin[10]    # 11th position
    month_char = vin[11]    # 12th position

    # Decode values
    year = year_codes.get(year_char, "Unknown Year")
    month = month_codes.get(month_char, "Unknown Month")
    plant = plant_codes.get(plant_char, "Unknown Plant")
    model = f"Model-{model_code}"  # Placeholder, update with actual mappings
    engine = f"Engine-{engine_code}"  # Placeholder, update with actual mappings

    return {
        "VIN": vin,
        "Make": "Mahindra",
        "Model": model,
        "Engine": engine,
        "Manufacturing Month": month,
        "Manufacturing Year": year,
        "Manufacturing Plant": plant
    }
